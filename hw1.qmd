---
title: "FE 530 – Homework I"
author: "Makenzie Snodgrass"
date: today
format:
  pdf:
    keep-tex: false
    toc: true
    toc-depth: 3
    include-in-header:
      text: |
        \usepackage{float}
execute:
  echo: true
  warning: false
  message: false
---

Source repository: [Maknzs/FE530_HW1](https://github.com/Maknzs/FE530_HW1). [github.com/Maknzs/FE530_HW1/tree/main/src](https://github.com/Maknzs/FE530_HW1/tree/main/src) holds the python scripts that generate the following tables: @tbl-q1-params; @tbl-q1-r_f; @tbl-q1-na; @tbl-q1-alloc-102; @tbl-q1-17a-repl; @tbl-q1-17b-dcf; @tbl-q2-21; @tbl-q2-22; @tbl-q2-23; @tbl-q3-params; @tbl-q3-portfolios-1; @tbl-q3-portfolios-2; @tbl-q3-arb-05; @tbl-q4-payoff-fair; @tbl-q4-fair; @tbl-q4-rn-check; @tbl-q4-cases. They also produce the figures: @fig-q1-spy-hist; @fig-q1-var-curve; @fig-q2-heat; @fig-q3-frontier-05; @fig-q3-frontier-05-points.

# A Simple Market Model

## Conditional Expectation and Conditional Variance
    
We model the one–period return as
$$
S_{t+1}=\begin{cases}
S_t(1+u) & \text{with prob }\pi,\\
S_t(1+d) & \text{with prob }1-\pi,
\end{cases} V_{t}=x S_{t} +y B_{t}.
$$

Assuming that x + y = 1 and because $S_t=B_t=100$, then $V_t=xS_t+yB_t=100$. I start by deriving the conditional expectation equations for the risky and risk free assets.
$$
\mathbb{E}[S_{t+1}\mid S_t]=\pi S_t(1+u)+(1-\pi)S_t(1+d)
$$
$$
\mathbb{E}[S_{t+1}\mid S_t]=S_t(1+\pi u +(1-\pi)d)
$$

And simply
$$
\mathbb{E}[B_{t+1}]=B_t(1+r_f).
$$

Given that $V_{t+1}=xS_{t+1}+yB_{t+1}=xS_t(1+\pi u +(1-\pi)d)+yB_t(1+r_f)$,
$$
\mathbb{E}[V_{t+1}\mid V_t]=x\mathbb{E}[S_{t+1}]+y\mathbb{E}[B_{t+1}].
$$

I finally substitute the conditional expectations and $V_t$ for $S_t$ and $B_t$ to get
$$
\mathbb{E}[V_{t+1}\mid V_t]=V_t\left[x\bigl(1+\pi u+(1-\pi)d\bigr)+y(1+r_f)\right]
$$

For the conditional variance, we first assume the variance of the risk-free position is zero and 
$$
\operatorname{Var}(V_{t+1}\mid V_t)=\operatorname{Var}(S_{t+1}\mid S_t)
$$

Then, we start with 
$$
\operatorname{Var}(S_{t+1}\mid S_t)=\mathbb{E}[S_{t+1}^2]-\mathbb{E}[S_{t+1}]^2
$$

Where
$$
\mathbb{E}[S_{t+1}^2]=S_t(\pi u^2+(1-\pi)d^2)
$$

And given above 
$$ 
\mathbb{E}[S_{t+1}]=S_t(1+\pi u +(1-\pi)d)
$$

We then substitute and conclude
$$
\operatorname{Var}(S_{t+1}\mid S_t)=S_t(\pi u^2+(1-\pi)d^2)-(S_t(1+\pi u+(1-\pi)d))^2.
$$

## Estimate $(\pi, u, d)$
The pi estimate is calculated as (# of up months)/(total # of months observed).<br>
The u estimate is calculated as the average return of up months.<br>
The d estimate is calculated as the average return of down months.<br>
All of these estimates are based on the SPY 2012-2022.
```{python}
#| label: tbl-q1-params
#| tbl-cap: 'Estimated binomial parameters $(\pi, u, d)$ from SPY monthly returns (2012–2022).'
#| echo: false
import pandas as pd
from pathlib import Path

DATA = Path("data")
est = pd.read_csv(DATA/"q1_binomial_params.csv")
est
```

```{python}
#| label: fig-q1-spy-hist
#| fig-cap: 'SPY monthly returns histogram (2012–2022).'
#| fig-align: center
#| fig-pos: 'H'      # <- hold here
#| echo: false

from IPython.display import Image, display
from pathlib import Path
display(Image(filename=str(Path("figures")/"q1_spy_return_hist.png")))
```
## Estimate $(r_f)$ With SHY Between 2021 and 2022
The $(r_f)$ estimate below is calculated by averaging the monthly returns of the SHY over 2021-2022.
```{python}
#| label: tbl-q1-r_f
#| tbl-cap: 'Estimated monthly risk-free rate from SHY (2021–2022).'
#| echo: false
import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q1_rf.csv").round(6)
```

## Is the No-Arbitrage Condition Satisfied?
Yes, the no-arbitrage condition is satisfied as shown below.
```{python}
#| label: tbl-q1-na
#| tbl-cap: 'No-arbitrage test: check $d<r_f<u$.'
#| echo: false
import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q1_no_arb.csv").round(6)
```

## Minimize Portfolio Variance on $100
Given that we have no return target and the variance associated with the risk-free asset $y$
is considered to be 0, placing all $100 in the risk-free asset $y$ would result in 0 portfolio variance.
### Figure 1 – One-month portfolio variance as a function of risky weight $w$ (0–1)

```{python}
#| label: fig-q1-var-curve
#| fig-cap: 'One-month portfolio variance as a function of risky weight w (0–1).'
#| fig-align: center
#| fig-pos: 'H'      # <- hold here
#| echo: false

from IPython.display import Image, display
from pathlib import Path
display(Image(filename=str(Path("figures")/"q1_var_vs_w.png")))
```

## Allocation for $102 Target at $t=1$
Given the budget of $V_t=100$ and the target of $E[V_{t+1}]=102$, the weight is calculated
$$
x = V_t\frac{\frac{V_{t+1}}{V_t}-(1+r_f)}{\mu-r_f},\ \ \mu=\pi u+(1-\pi)d
$$
```{python}
#| label: tbl-q1-alloc-102
#| tbl-cap: 'Allocation $(x, y)$ targeting $E[V_{t+1}] = 102$ with $V_t = 100$.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q1_alloc_102.csv")
```
From a trading perspective, this means that we need to borrow $73.682 at the risk-free rate 
(or short the risk-free asset) and invest $173.682 in the risky asset.

## Option Pricing
Both methods assume that current prices are $S_0=B_0=100$, with the same $\pi,u,d$ from above.

### Option Replicating Approach
To price the call option using the option replicating approach, first we define 
$$
S_{t+1}=\begin{cases}
S_t(1+u) & \text{with prob }\pi,\\
S_t(1+d) & \text{with prob }1-\pi
\end{cases}
$$
and
$$
C_{t+1}=\begin{cases}
C_u=\max(S_t(1+u)-K,0) & \text{with prob }\pi,\\
C_d=\max(S_t(1+d)-K,0) & \text{with prob }1-\pi
\end{cases}
$$
and
$$
xS_{t+1}+yB_{t+1}=\begin{cases}
xS_t(1+u)+yB_t(1+r_f) & \text{with prob }\pi,\\
xS_t(1+d)+yB_t(1+r_f) & \text{with prob }1-\pi
\end{cases}
$$
solving for $x$ we get
$$
xS_t(1+u)+yB_t(1+r_f)-C_u=xS_t(1+d)+yB_t(1+r_f)-C_d,
$$
$$
x(S_t(1+u)-S_t(1+d))=C_u-C_d,
$$
$$
x=\frac{C_u-C_d}{S_t(u-d)}
$$
and plug our $x$ in to solve for $y$
$$
\frac{C_u-C_d}{S_t(u-d)}S_t(1+u)+yB_t(1+r_f)=C_u,
$$
$$
y=\frac{C_u-C_d-\frac{C_u}{S_t(u-d)}S_t(1+u)}{B_t(1+r_f)}
$$
then we place our values for x and y into our value formula
$$
C_t=xS_t+yB_t
$$
and to check our work we also define
$$
V_t=xS_t+yB_t-C_t
$$
which implies
$$
V_u=xS_t(1+u)+yB_t(1+r_f)-C_u
$$
and
$$
V_d=xS_t(1+d)+yB_t(1+r_f)-C_d
$$
where want $V_u=V_d$

```{python}
#| label: tbl-q1-17a-repl
#| tbl-cap: 'One-step call via replicating portfolio (Delta and B0).'
#| echo: false

import pandas as pd, pathlib
df = pd.read_csv(pathlib.Path("data")/"q1_option_pricing.csv")
df[["K","Cu","Cd","x_rep","y_rep","C0_rep","Vu","Vd","Vu=Vd"]]
```

### DCF Method
The risk-neutral probability is calculated as
$$
\pi^* = \frac{r_f-d}{u-d}
$$
And the value of the call option at $t=0$ is defined as
$$
C_t=\frac{\pi^* C_u + (1-\pi^*)C_d}{1+r_f}
$$

```{python}
#| label: tbl-q1-17b-dcf
#| tbl-cap: 'One-step call via risk-neutral expectation (DCF).'
#| echo: false

import pandas as pd, pathlib
df = pd.read_csv(pathlib.Path("data")/"q1_option_pricing.csv")
df[["pi_star","C0_dcf","C0_rep","C0_rep=C0_dcf"]]
```

# Risk-Free Assets

## Closed form solution for $x$ as a function of $\alpha,r,g,n,\tau$

Let 
$$
\theta=\frac{1+g}{1+r}
$$

Present values at t=0
\begin{align*}
\text{PV}_{\text{save}}
&= \sum_{t=1}^{n} \frac{x\,(1+g)^{\,t-1}}{(1+r)^{\,t}}
= \frac{x}{(1+r)}\sum_{t=1}^{n}\theta^{\,t-1}
= \frac{x}{(1+r)}\,\frac{1-\theta^{\,n}}{1-\theta},\\[6pt]
\text{PV}_{\text{ret}}
&= \sum_{k=1}^{\tau} \frac{\alpha\,(1+g)^{\,n+k-1}}{(1+r)^{\,n+k}}
= \alpha\,\frac{(1+g)^{\,n-1}}{(1+r)^{\,n}}\sum_{k=1}^{\tau}\theta^{\,k}
= \alpha\,\frac{(1+g)^{\,n-1}}{(1+r)^{\,n}}\,\frac{\theta\,(1-\theta^{\,\tau})}{1-\theta}.
\end{align*}

Equate and solve for x
\begin{align*}
\text{PV}_{\text{save}}=\text{PV}_{\text{ret}}
\quad &\Longrightarrow\quad
\frac{x}{(1+r)}\,\frac{1-\theta^{\,n}}{1-\theta}
= \alpha\,\frac{(1+g)^{\,n-1}}{(1+r)^{\,n}}\,\frac{\theta\,(1-\theta^{\,\tau})}{1-\theta}\\[6pt]
&\Longrightarrow\quad
x\,(1-\theta^{\,n})
= \alpha\,\frac{(1+g)^{\,n-1}}{(1+r)^{\,n-1}}\,\theta\,(1-\theta^{\,\tau})\\[6pt]
&\Longrightarrow\quad
x
= \alpha\,\frac{(1+g)^{\,n-1}}{(1+r)^{\,n-1}}\,
    \frac{\theta\,(1-\theta^{\,\tau})}{1-\theta^{\,n}}
= \alpha\theta^{\,n}\,
  \frac{1-\theta^{\,\tau}}{1-\theta^{\,n}}.
\end{align*}

To get our final equation
$$
\boxed{x_{\text{disc}}(\alpha,r,g,n,\tau)
= \alpha \,\theta^{\,n}\,\frac{1-\theta^{\,\tau}}{1-\theta^{\,n}},
\quad \theta=\frac{1+g}{1+r},\ \ r\neq g,}
$$

Special case, if $r=g$ $(\theta\to 1)$
$$
x_{\text{disc}}
= \alpha\,\lim_{\theta\to 1}\,
  \theta^{\,n}\frac{1-\theta^{\,\tau}}{1-\theta^{\,n}}
= \alpha\,\frac{\tau}{n}.
$$

## Discrete Contribution Rate

Using our equation derived above, we compute

$$
x_{\text{disc}}(\alpha=0.5,r=0.04,g=0.01,n=40,\tau=20)
=(0.5)\theta^{(40)}\frac{1-\theta^{(20)}}{1-\theta^{(40)}},
\quad \theta=\frac{1+0.01}{1+0.04},
$$

```{python}
#| label: tbl-q2-21
#| tbl-cap: 'Discrete contribution rate and inputs.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q2_x_values.csv")[["alpha","r","g","n","tau","x_discrete"]].round(6)
```

## Continuous-Time Contribution Rate

$$
x_{\text{disc}}(\alpha,r,g,n,\tau)
= \alpha \,\theta^{\,n}\,\frac{1-\theta^{\,\tau}}{1-\theta^{\,n}},
\quad \theta=\frac{1+g/m}{1+r/m},\ \ r\neq g,
$$

Define $\theta_m$ and the m-times-per-year version
$$
\theta_m=\frac{1+g/m}{1+r/m},\qquad
x_{\text{disc}}^{(m)}=\alpha\,\theta_m^{\,mn}\,
\frac{1-\theta_m^{\,m\tau}}{1-\theta_m^{\,mn}} \quad (r\ne g).
$$

Key limit: $\theta_m^m \to e^{g-r}$
$$
\ln\theta_m=\ln\!\left(1+\frac{g}{m}\right)-\ln\!\left(1+\frac{r}{m}\right)
=\frac{g-r}{m}+O\!\left(\frac{1}{m^2}\right),
\qquad
\Rightarrow\quad
\lim_{m\to\infty}\theta_m^{\,m}
=\exp\!\Big(\lim_{m\to\infty} m\ln\theta_m\Big)
=e^{\,g-r}.
$$

Therefore powers scale cleanly
$$
\lim_{m\to\infty}\theta_m^{\,mn}=e^{(g-r)n},
\qquad
\lim_{m\to\infty}\theta_m^{\,m\tau}=e^{(g-r)\tau}.
$$

Continuous-time limit
$$
\boxed{\;
\lim_{m\to\infty} x_{\text{disc}}^{(m)}
=\alpha\,e^{(g-r)n}\,
\frac{1-e^{(g-r)\tau}}{1-e^{(g-r)n}}}
$$

```{python}
#| label: tbl-q2-22
#| tbl-cap: 'Continuous contribution rate and inputs.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q2_x_values.csv")[["alpha","r","g","n","tau","x_continuous"]].round(6)
```

```{python}
#| label: tbl-q2-23
#| tbl-cap: 'Discrete vs continuous: percent difference.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q2_x_values.csv")[["x_discrete","x_continuous","pct_diff","discrete_<_cont"]].round(6)
```
## Sensitivity of $x$ to $r$ and $g$

We evaluate $x_{cont}$ on a grid of salary growth $g$ and interest rate $r$ to visualize how funding needs change.
As expected, higher $r$ reduces the required contribution rate, while higher $g$ increases it.

```{python}
#| label: fig-q2-heat
#| fig-cap: 'Contribution rate x (continuous) across r and g.'
#| fig-align: center
#| fig-pos: 'H'   # <- hold here
#| echo: false

from IPython.display import Image, display
from pathlib import Path
display(Image(filename=str(Path("figures")/"q2_sensitivity_heatmap.png")))
```

# Portfolio Management

## Define Mean Vector ($\mu$)

$$
R_i=\begin{cases}
u_i & \text{with prob }\pi_i,\\
d_i & \text{with prob }1-\pi_i.
\end{cases}
$$
Starting with the mean return for asset $i$, $\mu_i=p_iu_i+(1-p_i)d_i$, for $i\in\{1,2\}$
$$
\mu
=\begin{bmatrix}\mu_1\\ \mu_2\end{bmatrix}
=\begin{bmatrix}
\pi_1 u_1 + (1-\pi_1) d_1\\
\pi_2 u_2 + (1-\pi_2) d_2
\end{bmatrix}.
$$

## Define Covariance Matrix ($\Sigma$)

$$
\mu=\mathbb{E}[R_i]=\pi_i u_i+(1-\pi_i)d_i,
\qquad
\mathbb{E}[R_i^2]=\pi_i u_i^2+(1-\pi_i)d_i^2.
$$
$$
\sigma_i^2=\operatorname{Var}(R_i)=\mathbb{E}[R_i^2]-\big(\mu\big)^2
= \pi_i u_i^2+(1-\pi_i)d_i^2
   -\big(\pi_i u_i+(1-\pi_i)d_i\big)^2.
$$
$$
\sigma_i^2=\operatorname{Var}(R_i)
= \pi_i(1-\pi_i)\,\big(u_i^2+d_i^2-2u_i d_i\big)
= \boxed{\,\pi_i(1-\pi_i)\,(u_i-d_i)^2\,}.
$$
$$
\sigma_i = \sqrt{\pi_i(1-\pi_i)}\,\lvert u_1-d_1\rvert;
$$
$$
\sigma_{12}=\operatorname{Cov}(R_{12})=\rho\,\sigma_1\,\sigma_2
$$
$$
\Sigma=\begin{bmatrix}
\operatorname{Var}(R_1) & \operatorname{Cov}(R_{1,2})\\
\operatorname{Cov}(R_{1,2}) & \operatorname{Var}(R_2)
\end{bmatrix},
$$
$$
\Sigma=\begin{bmatrix}
\sigma_1^2 & \rho\,\sigma_1\sigma_2\\
\rho\,\sigma_1\sigma_2 & \sigma_2^2
\end{bmatrix},
$$
$$
\Sigma=\begin{bmatrix}
\pi_1(1-\pi_1)(u_1-d_1)^2 & \rho\,\sqrt{\pi_1(1-\pi_1)}\,\sqrt{\pi_2(1-\pi_2)}\,\lvert u_1-d_1\rvert\lvert u_2-d_2\rvert\\[6pt]
\rho\,\sqrt{\pi_1(1-\pi_1)}\,\sqrt{\pi_2(1-\pi_2)}\,\lvert u_1-d_1\rvert\lvert u_2-d_2\rvert & \pi_2(1-\pi_2)(u_2-d_2)^2
\end{bmatrix}.
$$
```{python}
#| label: tbl-q3-params
#| tbl-cap: 'Effective inputs used in Q3.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q3_params_effective.csv").round(6)
```

## Global Minimum-Variance (GMV) and Sharpe Portfolios

### GMV 
For two assets, the closed form weights are
$$
w_{\text{GMV},1}=\frac{\sigma_2^2-\rho\,\sigma_1\sigma_2}{\sigma_1^2+\sigma_2^2-2\rho\,\sigma_1\sigma_2},
\qquad
w_{\text{GMV},2}=1-w_{\text{GMV},1}.
$$

```{python}
#| label: tbl-q3-portfolios-1
#| tbl-cap: 'GMV Portfolio Weights at $\rho={0.5,0}$'
#| echo: false

import pandas as pd, pathlib
df = pd.read_csv(pathlib.Path("data")/"q3_portfolios.csv").round(6)
df[["rho","w1_GMV","w2_GMV"]]
```

### Sharpe
With risk-free rate $r_f$, the tangency portfolio maximizes
$$
\mathrm{SR}(w)=\frac{w^\top\mu-r_f}{\sqrt{w^\top\Sigma w}}
\quad\text{subject to}\quad \mathbf{1}^\top w=1.
$$
A standard result gives
$$
\boxed{\,w_{\text{SR}}=\dfrac{\Sigma^{-1}(\mu-r_f\,\mathbf{1})}{\mathbf{1}^\top\Sigma^{-1}(\mu-r_f\,\mathbf{1})}\, }.
$$
```{python}
#| label: tbl-q3-portfolios-2
#| tbl-cap: 'Sharpe Portfolio Weights at $\rho={0.5,0}$'
#| echo: false

import pandas as pd, pathlib
df = pd.read_csv(pathlib.Path("data")/"q3_portfolios.csv").round(6)
df[["rho","w1_SR","w2_SR"]]
```

## Diversification
The lower the correlation, the more of a diversification benefit there is. Both the GMV and the Sharpe weights shift toward holding more of a balance of assets instead of shorting one of them.

## $\rho=0.5$

### Mean-Variance Efficient Frontier
```{python}
#| label: fig-q3-frontier-05
#| fig-cap: 'Two-asset efficient frontier (rho = 0.5); GMV (o) and Tangency (*).'
#| fig-pos: 'H'
#| echo: false

from IPython.display import Image, display
from pathlib import Path
display(Image(filename=str(Path("figures")/"q3_frontier_rho_0p5.png")))
```

### Compare Arbitrary Weights for $w_1$ and $w_2$ to the Previous Frontier
```{python}
#| label: fig-q3-frontier-05-points
#| fig-cap: 'Frontier with arbitrary weights overlaid (rho = 0.5).'
#| fig-pos: 'H'
#| echo: false

from IPython.display import Image, display
from pathlib import Path
display(Image(filename=str(Path("figures")/"q3_frontier_with_points_rho_0p5.png")))
```

```{python}
#| label: tbl-q3-arb-05
#| tbl-cap: 'Selected weights and their mean/sigma (rho = 0.5).'
#| echo: false

import pandas as pd, pathlib
df=pd.read_csv(pathlib.Path("data")/"q3_arbitrary_weights_rho_0p5.csv").round(6)
df[["w1","w2","mean","sigma"]]
```

# Forward Contracts

## Prove $F_{(0,1)}=S_0(1+r_f)$
\textbf{No–arbitrage cash–and–carry.}
Assume a forward to \textit{sell} one share at time 1 for price $F(0,1)=F$.

(i) Suppose $F>S(0)(1+r_f)$ (forward overpriced). At $t=0$:
borrow $S(0)$ at the risk–free rate and buy one share; short one forward.
At $t=1$: deliver the share into the short forward, receive $F$, and repay
the loan $S(0)(1+r_f)$. Profit $=F-S(0)(1+r_f)>0$ regardless of the stock path.

(ii) Suppose $F<S(0)(1+r_f)$ (forward underpriced). At $t=0$:
short–sell one share to receive $S(0)$ and invest at the risk–free rate;
go long one forward. At $t=1$: use the long forward to buy the share for $F$
and return it to the lender of the short sale; your invested cash is
$S(0)(1+r_f)$. Profit $=S(0)(1+r_f)-F>0$ path–independent.

No–arbitrage eliminates both cases, so $F(0,1)=\boxed{\,S(0)(1+r_f)\,}$.

## Find $\mathbb{E}^{\mathbb{Q}}[S_1]$
The risk-neutral probability is defined as
$$
q=\frac{r_f-d}{u-d}.
$$
Then
$$
\mathbb{E}^{\mathbb{Q}}[S_1]
= S_0\big(q(1+u)+(1-q)(1+d)\big)
= S_0\,(1+r_f).
$$
Equivalently, for simple returns $R_S$, we have $\mathbb{E}^{\mathbb{Q}}[R_S]=r_f$.

## Derive Futures Payoff Formula
A long forward entered at $t=0$ with delivery price $F(0,1)=F$ pays at $t=1$
$$
V(1)=S_1-F
=
\begin{cases}
S_0 U - F, & \text{with prob }\pi,\\[2pt]
S_0 D - F, & \text{with prob }1-\pi.
\end{cases}
$$
The long breaks even when $V(1)=0$, i.e., when $S_1=F$ at maturity.
With a fairly priced forward, $\mathbb{E}^{\mathbb{Q}}[V(1)]=0$.
```{python}
#| label: tbl-q4-payoff-fair
#| tbl-cap: 'Long-forward payoff by state when the forward is fairly priced.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q4_payoff_fair.csv").round(6)
```

## Demonstrate Arbitrage Trading Strategy
Here $F^*=S_0(1+r_f)=100\times1.04=104$.

\textbf{(a) } $F(0,1)=104$:
$F=F^*$, so no arbitrage; the forward is fairly priced.

\textbf{(b) } $F(0,1)=105$ (overpriced: $F>F^*$):
\emph{Cash–and–carry.} At $t=0$ borrow \$100 and buy one share; short one forward.
At $t=1$ deliver the share, receive \$105, repay \$104; profit \$1 riskless.

\textbf{(c) } $F(0,1)=103$ (underpriced: $F<F^*$):
\emph{Reverse cash–and–carry.} At $t=0$ short–sell one share for \$100 and invest the proceeds;
go long one forward. At $t=1$ use the forward to buy the share for \$103, return it to the lender,
and withdraw \$104 from the risk–free account; profit \$1 riskless.
```{python}
#| label: tbl-q4-fair
#| tbl-cap: 'Fair forward price from cash-and-carry.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q4_fair.csv").round(6)
```
```{python}
#| label: tbl-q4-rn-check
#| tbl-cap: 'Risk-neutral probability and expectation check.'
#| echo: false

import pandas as pd, pathlib
pd.read_csv(pathlib.Path("data")/"q4_rn_check.csv").round(6)

```
```{python}
#| label: tbl-q4-cases
#| tbl-cap: 'Mispricing classification and strategy for F = 104, 105, 103.'
#| echo: false

import pandas as pd, pathlib
pd.set_option("display.max_colwidth", None) 
pd.read_csv(pathlib.Path("data")/"q4_cases.csv").round(6)

```
